#lang narscribblus/interactive

@title{Interposing View Slices}

Interposing view slices decorate another view slice by inserting new, synthetic
objects based on the output of two helper routines: a classifier, and a maker.

For example, let us suppose you are writing an address book application and would
like to insert giant letters before each section of the alphabet.

@collapsey["Addressbook Data"]{
@exampleCode["addrbook-data"
@js{
  var people = [
    {name: "Aardvarkman"},
    {name: "Alice"},
    {name: "Betty"},
    {name: "Bob"},
    {name: "Chuck"},
  ];
  var addrbook = {
    peeps: people,
  };
}]}

@exampleShow["addrbook-example"
  "wmsy-prolog" "addrbook-interposer" "addrbook-widgets" "addrbook-data"
  "addrbook-insertion"
]{Addressbook Example Output}

There are obviously a number of ways you could accomplish this, some requiring
more custom code than others and some being more efficient than others in terms
of how much of the total data-set you need to load into memory.  The interposing
view slice tries to be good on both counts.

You provide a classifier function and a maker function.  The classifier function
is invoked for every object that is to be exposed to the consumer of the view
slice.  Whenever the value returned by the classifier differs between two
consecutive objectives in the view slice, we invoke the maker function.  We
may optionally also invoke the maker for the first element in the view slice
(default: yes) and the last element (default: no).

@exampleCode["addrbook-interposer"
@js{
  var letterInterposer = wy.defineInterposingViewSlice({
    classifier: traceWrap("green", function classifier(person) {
      return person.name[0].toLocaleUpperCase();
    }),
    maker: traceWrap("blue", function maker(pre, post) {
      return {
        letter: post.name[0].toLocaleUpperCase(),
      };
    }),
  });
}]

@traceOutput["addrbook-example"]{Addressbook Example Trace}

@collapsed["Wmsy Boilerplate"]{@boilerplate["wmsy-prolog"
@js{
  var wmsy = require("wmsy/wmsy");
  var wy = new wmsy.WmsyDomain({id: exampleName, domain: exampleName,
                                clickToFocus: true});
}]}

@collapsed["Addressbook Widgets"]{
@exampleCode["addrbook-widgets"
@js{
  wy.defineWidget({
    name: "giant-letter",
    constraint: {
      type: "interposed",
    },
    structure: wy.bind("letter"),
    style: {
      root: [
        "font-size: 200%;",
      ],
    },
  });

  wy.defineWidget({
    name: "person",
    constraint: {
      type: "person",
    },
    structure: {
      name: wy.bind("name"),
    },
  });

  wy.defineWidget({
    name: "addressbook",
    constraint: {
      type: "addressbook",
    },
    structure: {
      peeps: wy.vertList(
               letterInterposer({type: "interposed"},
                                {type: "person"}),
               "peeps"),
    }
  });
}]}

@collapsed["Addressbook Example Insertion"]{
@exampleCode["addrbook-insertion"
@js{
  var binder = wy.wrapElement(exampleDomNode);
  binder.bind({type: "addressbook", obj: addrbook});
}]}

